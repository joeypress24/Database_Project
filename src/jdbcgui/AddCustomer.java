package jdbcgui;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Press, Joseph, and Watsy, Farah
 */
public class AddCustomer extends javax.swing.JFrame {
    myDBCon dbCon;
   // ResultSet rs;

    // constructor to create new employee
    public AddCustomer() {
        initComponents();
        this.setLocationRelativeTo(null); // center form in screen 
        // set all error labels to invisible
        lblLicenseError.setVisible(false);
        lblNameError.setVisible(false);
        lblEmailError.setVisible(false);
        lblPnoError.setVisible(false);
        lblCustomerIDError.setVisible(false);

        dbCon = new myDBCon();
        
        // I don't think we need this
        /* 
        try {//populate mgr and deptno combo boxes 
            // populate valid mgr numbers 
            dbCon = new myDBCon();
            rs = dbCon.executeStatement("SELECT empno FROM emp ORDER BY empno ASC");
            // populate mgr combo box
            while (rs.next()) {
                cmbMgr.addItem(rs.getString("empno"));
            }
            // get and populate valid department numbers 
            rs = dbCon.executeStatement("SELECT DISTINCT deptno, dname FROM dept ORDER BY deptno ASC");
            while (rs.next()) {
                cmbDeptno.addItem(rs.getString("deptno"));
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
        */
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtLicenseNo = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPno = new javax.swing.JTextField();
        btnAddNewEmp = new javax.swing.JButton();
        lblLicenseError = new javax.swing.JLabel();
        lblEmailError = new javax.swing.JLabel();
        lblNameError = new javax.swing.JLabel();
        lblPnoError = new javax.swing.JLabel();
        lblCustomerIDError = new javax.swing.JLabel();
        txtCustomerID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Add New Customer");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("License#:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Email:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Phone Number:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Customer ID:");

        txtLicenseNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtPno.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnAddNewEmp.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddNewEmp.setText("Add New");
        btnAddNewEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewEmpActionPerformed(evt);
            }
        });

        lblLicenseError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLicenseError.setForeground(new java.awt.Color(255, 0, 0));
        lblLicenseError.setText("error label");

        lblEmailError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblEmailError.setForeground(new java.awt.Color(255, 0, 0));
        lblEmailError.setText("error label");

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        lblPnoError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblPnoError.setForeground(new java.awt.Color(255, 0, 0));
        lblPnoError.setText("error label");

        lblCustomerIDError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblCustomerIDError.setForeground(new java.awt.Color(255, 0, 0));
        lblCustomerIDError.setText("error label");

        txtCustomerID.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(jLabel1)
                .addContainerGap(195, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtLicenseNo, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLicenseError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAddNewEmp)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtEmail)
                            .addComponent(txtPno)
                            .addComponent(txtCustomerID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblPnoError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCustomerIDError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmailError, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtLicenseNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLicenseError)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmailError))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPnoError, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(2, 2, 2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(lblCustomerIDError)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtPno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(79, 79, 79)
                .addComponent(btnAddNewEmp)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    // verify valid entry of integer values
    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // verify valid entry of double values
    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    // clear all labels used to display error messages 
    void clearErrorLabels() { 
        lblLicenseError.setText("");
        lblLicenseError.setVisible(false);
        lblNameError.setText("");
        lblNameError.setVisible(false);
        lblEmailError.setText("");
        lblEmailError.setVisible(false);
        lblPnoError.setText("");
        lblPnoError.setVisible(false);
        lblCustomerIDError.setText("");
        lblCustomerIDError.setVisible(false);
    }

    // validate all user entry before sending new employee details to DB
    boolean isValidData() {
        clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtLicenseNo.getText().trim().isEmpty() || txtLicenseNo.getText().trim().length() > 9) {
            if (txtLicenseNo.getText().trim().isEmpty()) {
                lblLicenseError.setText("Invalid. Cannot be empty.");
            } 
            else {
                lblLicenseError.setText("Invalid. Must be < 10 characters.");
            }
            lblLicenseError.setVisible(true);
            result = false;
        }

        // check the name field
        if (txtName.getText().trim().isEmpty() || (txtName.getText().trim().length() > 27)) {
            if (txtName.getText().trim().isEmpty()) {
                lblNameError.setText("Invalid. Cannot be empty.");
            } else if ((txtName.getText().trim().length() > 27)) {
                lblNameError.setText("Invalid. Must be < 28 chars.");
            }
            lblNameError.setVisible(true);
            result = false;
        }

        // check the email field
        if (txtEmail.getText().trim().isEmpty() || (txtEmail.getText().trim().length() > 27)) {
            if (txtEmail.getText().trim().isEmpty()) {
                lblEmailError.setText("Invalid. Cannot be empty.");
            } else if (txtEmail.getText().trim().length() > 27) {
                lblEmailError.setText("Invalid. Must be < 28 chars.");
            }
            lblEmailError.setVisible(true);
            result = false;
        }

        // check the phone number
        if (txtPno.getText().trim().isEmpty() || !isInteger(txtPno.getText().trim()) || txtPno.getText().trim().length() > 11) {
            if(txtPno.getText().trim().isEmpty())
                lblPnoError.setText("Invalid. Cannot be empty.");
            else if(!isInteger(txtPno.getText().trim()))
                lblPnoError.setText("Invalid. Pno must be integer.");
            else
                lblPnoError.setText("Invalid. Pno must be < 11 characters.");
            lblPnoError.setVisible(true);
            result = false;
        }

        // check the customer id
        if (txtCustomerID.getText().trim().isEmpty() || txtCustomerID.getText().trim().length() > 9) {
            if (txtPno.getText().trim().isEmpty()) {
                lblCustomerIDError.setText("Invalid. Cannot be empty.");
            } 
            else
                lblCustomerIDError.setText("Invalid. Must be <9 characters.");
            lblCustomerIDError.setVisible(true);
            result = false;
        }
        return result;
    }

    // clear for every new entry 
    void clearInputBoxes() { 
        txtLicenseNo.setText("");
        txtName.setText("");
        txtEmail.setText("");
        txtPno.setText("");
        txtCustomerID.setText("");
    }

    // check if the employee is a duplicate
    private boolean isDuplicate(String licenseno) throws SQLException {
        String stmtSQL = "SELECT * FROM cust WHERE license = '" + licenseno + "'";
        ResultSet rs = dbCon.executeStatement(stmtSQL);
        if(rs.next())
            return true;
        return false;
    }
    
    // method invoked when a new emp is added
    private void btnAddNewEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewEmpActionPerformed
        // TODO add your handling code here:
        try {
            if (isValidData() && !isDuplicate(txtLicenseNo.getText().trim())) {
                // prepare the SQL statement
                String prepSQL = "INSERT INTO CUST (license, email, id, pnum, name) VALUES ("
                        + "'" + txtLicenseNo.getText().trim() + "', "
                        + "'" + txtEmail.getText().toUpperCase() + "', "
                        + "'" + txtCustomerID.getText() + "', "
                        + "'" + txtPno.getText() + "', " 
                        + "'" + txtName.getText() + "')";
                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    javax.swing.JLabel label = new javax.swing.JLabel("New customer added successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    clearInputBoxes();
                } else {
                    
                }
                
            } else {
                if(isValidData())
                {
                    javax.swing.JLabel label = new javax.swing.JLabel("Invalid data. Please fix.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
                else if(isDuplicate(txtLicenseNo.getText().trim()))
                {
                    javax.swing.JLabel label = new javax.swing.JLabel("Customer Already exists. Use a different ID number.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                }
                
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error adding new employee.");
            System.out.println(e);
        }
    }//GEN-LAST:event_btnAddNewEmpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewEmp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblCustomerIDError;
    private javax.swing.JLabel lblEmailError;
    private javax.swing.JLabel lblLicenseError;
    private javax.swing.JLabel lblNameError;
    private javax.swing.JLabel lblPnoError;
    private javax.swing.JTextField txtCustomerID;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtLicenseNo;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPno;
    // End of variables declaration//GEN-END:variables
}
